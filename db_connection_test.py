#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
"""

import time
import sys
from database_manager import PostgreSQLManager
from config import config

def test_connection_stability():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
    
    db_manager = PostgreSQLManager()
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("1Ô∏è‚É£ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    if db_manager.connect():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return False
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    try:
        result = db_manager.execute_query("SELECT COUNT(*) FROM sxattr_source")
        total_attrs = int(result[0][0])
        print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω: {total_attrs} –∞—Ç—Ä–∏–±—É—Ç–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
    success_count = 0
    for i in range(10):
        try:
            result = db_manager.execute_query(f"SELECT COUNT(*) FROM sxattr_source WHERE ouid > {i * 100}")
            success_count += 1
            print(f"  –ó–∞–ø—Ä–æ—Å {i+1}/10: ‚úÖ")
        except Exception as e:
            print(f"  –ó–∞–ø—Ä–æ—Å {i+1}/10: ‚ùå {e}")
        time.sleep(0.1)
    
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_count}/10")
    
    # –¢–µ—Å—Ç 4: –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å a_log
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ a_log (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏)...")
    complex_query = """
        SELECT a.ouid, a.name, a.a_log 
        FROM sxattr_source a 
        WHERE a.a_log IS NOT NULL 
          AND LENGTH(a.a_log) > 100 
        LIMIT 5
    """
    
    try:
        result = db_manager.execute_query(complex_query)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å a_log")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ a_log –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
        for i, (ouid, name, a_log) in enumerate(result):
            print(f"  –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ç—Ä–∏–±—É—Ç–∞ {i+1}: {name}")
            try:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç–æ—Ç –∂–µ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ _analyze_attribute_exceptions_cached
                parse_query = f"""
                    WITH source_data AS (
                        SELECT
                            {ouid} as ouid,
                            '{name}' as name,
                            $${a_log}$$ as a_log
                    ),
                    attr_blocks AS (
                        SELECT
                            s.ouid,
                            s.name,
                            trim(split_part(attr_block, E'\\n', 1)) as attribute_name
                        FROM source_data s
                        CROSS JOIN LATERAL (
                            SELECT unnest(
                                regexp_split_to_array(
                                    s.a_log,
                                    E'(?=\\n[^[:space:]\\n])'
                                )
                            ) AS attr_block
                        ) attr_blocks
                        WHERE attr_block ~ 'source[[:space:]]*='
                            AND trim(split_part(attr_block, E'\\n', 1)) != ''
                            AND length(trim(attr_block)) > 0
                    )
                    SELECT COUNT(*) FROM attr_blocks
                """
                
                parse_result = db_manager.execute_query(parse_query)
                properties_count = int(parse_result[0][0])
                print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ {properties_count} —Å–≤–æ–π—Å—Ç–≤")
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    
    # –¢–µ—Å—Ç 5: –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (30 —Å–µ–∫)...")
    start_time = time.time()
    request_count = 0
    error_count = 0
    
    while time.time() - start_time < 30:
        try:
            result = db_manager.execute_query("SELECT COUNT(*) FROM sxattr_source")
            request_count += 1
            if request_count % 10 == 0:
                print(f"  –ó–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {request_count}")
        except Exception as e:
            error_count += 1
            print(f"  ‚ùå –û—à–∏–±–∫–∞ #{error_count}: {e}")
        
        time.sleep(0.5)
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:")
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {request_count}")
    print(f"  –û—à–∏–±–æ–∫: {error_count}")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(request_count/(request_count+error_count)*100):.1f}%")
    
    # –¢–µ—Å—Ç 6: –¢–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π...")
    try:
        exceptions_query = "SELECT COUNT(*) FROM __meta_statistic"
        result = db_manager.execute_query(exceptions_query)
        exceptions_count = int(result[0][0])
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {exceptions_count} –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        key_exceptions = ['readOnly', 'informs', 'description', 'title']
        for key in key_exceptions:
            check_query = f"SELECT COUNT(*) FROM __meta_statistic WHERE entity_name = '{key}'"
            result = db_manager.execute_query(check_query)
            count = int(result[0][0])
            print(f"  –ò—Å–∫–ª—é—á–µ–Ω–∏–µ '{key}': {count} –∑–∞–ø–∏—Å–µ–π")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    db_manager.disconnect()
    
    print("\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return True

def test_attributes_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    
    print("\nüî¨ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è get_attributes)")
    print("=" * 50)
    
    from data_service import DataService
    
    data_service = DataService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    print("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∫–∞–∫ –Ω–∞ –ø—Ä–æ–¥–µ...")
    
    result = data_service.get_attributes(
        page=1,
        per_page=20,
        search='',
        status_variance=2,
        event=0,
        a_priznak=3,
        base_url='',
        source_base_url='',
        exception_action_filter=None,
        analyze_exceptions=True
    )
    
    if 'error' in result:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
        return False
    
    stats = result.get('statistics', {})
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"  –í—Å–µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {result.get('total_count', 0)}")
    print(f"  –û–±–Ω–æ–≤–∏—Ç—å: {stats.get('update_count', 0)}")
    print(f"  –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å: {stats.get('ignore_count', 0)}")
    print(f"  –ë–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è: {stats.get('no_action_count', 0)}")
    
    total = stats.get('update_count', 0) + stats.get('ignore_count', 0) + stats.get('no_action_count', 0)
    print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã: {total} (–¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º)")
    
    return True

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î MetaRep")
    print(f"üìç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {config.postgres.host}:{config.postgres.port}/{config.postgres.database}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config.postgres.username}")
    
    try:
        # –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if test_connection_stability():
            print("\n‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã")
            
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            if test_attributes_analysis():
                print("\n‚úÖ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —É—Å–ø–µ—à–µ–Ω")
            else:
                print("\n‚ùå –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω")
                sys.exit(1)
        else:
            print("\n‚ùå –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
        
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!") 