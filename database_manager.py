"""
–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ JDBC
–†–∞—Å—à–∏—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ export_db_scripts.py
"""
import os
import jpype
import jpype.imports
import logging
import atexit
from typing import List, Tuple, Any, Optional
from contextlib import contextmanager
from config import config

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è JVM
_jvm_started = False

def initialize_jvm():
    """
    –ï–¥–∏–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JVM –¥–ª—è –≤—Å–µ—Ö JDBC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ export_db_scripts.py
    """
    global _jvm_started
    
    if _jvm_started and jpype.isJVMStarted():
        return True
    
    logger = logging.getLogger(__name__)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤
        mssql_driver = config.mssql.driver_path
        postgres_driver = config.postgres.driver_path
        
        if not os.path.exists(mssql_driver):
            logger.error(f"‚ùå MSSQL JDBC –¥—Ä–∞–π–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {mssql_driver}")
            return False
            
        if not os.path.exists(postgres_driver):
            logger.error(f"‚ùå PostgreSQL JDBC –¥—Ä–∞–π–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {postgres_driver}")
            return False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JAVA_HOME
        java_home = config.java_home
        logger.info(f"üîç Trying JAVA_HOME: {java_home}")
        
        if not os.path.exists(java_home):
            logger.error(f"‚ùå JAVA_HOME –Ω–µ –Ω–∞–π–¥–µ–Ω: {java_home}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ Java –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            import glob
            possible_paths = glob.glob('/Library/Java/JavaVirtualMachines/*/Contents/Home')
            if possible_paths:
                java_home = possible_paths[0]
                logger.info(f"üîÑ –ù–∞—à–ª–∏ Java: {java_home}")
            else:
                return False
        
        os.environ['JAVA_HOME'] = java_home
        logger.info(f"‚úÖ Using JAVA_HOME: {java_home}")
        
        # –°–æ–∑–¥–∞–µ–º classpath –¥–ª—è –æ–±–æ–∏—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ export_db_scripts.py)
        classpath = f"{mssql_driver}{os.pathsep}{postgres_driver}"
        
        if not jpype.isJVMStarted():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ JVM
            try:
                jvm_path = jpype.getDefaultJVMPath()
                logger.info(f"üîç JVM path: {jvm_path}")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if not os.path.exists(jvm_path):
                    logger.error(f"‚ùå JVM —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {jvm_path}")
                    return False
                
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã JVM –¥–ª—è M2 Mac
                jvm_args = [
                    f"-Djava.class.path={classpath}",
                    "-Xmx1024m",  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å
                    "-Xms256m",   # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å
                    "-XX:+UseG1GC",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º G1 —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞
                    "-XX:MaxGCPauseMillis=200",
                    "-Djava.awt.headless=true",  # –ë–µ–∑ GUI
                    "-XX:+UnlockExperimentalVMOptions",  # –î–ª—è M2 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    "-XX:+UseZGC" if hasattr(jpype, '_hasFeature') else "-XX:+UseG1GC"  # ZGC –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
                ]
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º JVM —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                jpype.startJVM(jvm_path, *jvm_args, convertStrings=False)
                logger.info("‚úÖ JVM –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º shutdown –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                atexit.register(shutdown_jvm)
                
            except Exception as jvm_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ JVM: {jvm_error}")
                return False
        
        _jvm_started = True
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JVM: {e}")
        return False

def shutdown_jvm():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ JVM"""
    global _jvm_started
    
    logger = logging.getLogger(__name__)
    
    try:
        if jpype.isJVMStarted():
            jpype.shutdownJVM()
            logger.info("JVM –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        _jvm_started = False
    except Exception as e:
        logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ JVM: {e}")

class DatabaseManager:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î —á–µ—Ä–µ–∑ JDBC"""
    
    def __init__(self, db_config):
        self.db_config = db_config
        self.connection = None
        self.logger = logging.getLogger(self.__class__.__name__)
        
    def connect(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JVM –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
            if not initialize_jvm():
                return False
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Java –∫–ª–∞—Å—Å—ã
            from java.sql import DriverManager, SQLException
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º JDBC URL
            jdbc_url = self.db_config.jdbc_url_template.format(
                host=self.db_config.host,
                port=self.db_config.port,
                database=self.db_config.database
            )
            
            self.logger.info(f"JDBC URL: {jdbc_url}")
            self.logger.info(f"User: {self.db_config.username}")
            self.logger.info(f"Database: {self.db_config.database}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
            connection_properties = {
                'user': self.db_config.username,
                'password': self.db_config.password,
                'connectTimeout': str(self.db_config.connection_timeout * 1000),  # –í –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                'socketTimeout': str(self.db_config.query_timeout * 1000)
            }
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            self.connection = DriverManager.getConnection(jdbc_url, self.db_config.username, self.db_config.password)
            
            self.logger.info("‚úÖ JDBC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        if self.connection:
            try:
                self.connection.close()
                self.logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            finally:
                self.connection = None
    
    def execute_query(self, query: str) -> List[Tuple[Any, ...]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞"""
        if not self.connection:
            raise Exception("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î")
        
        try:
            statement = self.connection.createStatement()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
            statement.setQueryTimeout(self.db_config.query_timeout)
            
            resultSet = statement.executeQuery(query)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
            metadata = resultSet.getMetaData()
            column_count = metadata.getColumnCount()
            
            results = []
            while resultSet.next():
                row = []
                for i in range(1, column_count + 1):
                    value = resultSet.getObject(i)
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Java –æ–±—ä–µ–∫—Ç—ã –≤ Python —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                    if value is not None:
                        if hasattr(value, 'toString'):
                            value_str = str(value)
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                            if isinstance(value_str, str) and '?' in value_str:
                                self.logger.debug(f"–í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏: {value_str}")
                            value = value_str
                        else:
                            value = value
                    row.append(value)
                results.append(tuple(row))
            
            self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å, –ø–æ–ª—É—á–µ–Ω–æ {len(results)} —Å—Ç—Ä–æ–∫")
            
            resultSet.close()
            statement.close()
            
            return results
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise
    
    def execute_update(self, query: str) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ INSERT/UPDATE/DELETE –∑–∞–ø—Ä–æ—Å–∞"""
        if not self.connection:
            raise Exception("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î")
        
        try:
            statement = self.connection.createStatement()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
            statement.setQueryTimeout(self.db_config.query_timeout)
            
            affected_rows = statement.executeUpdate(query)
            
            self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å, –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ {affected_rows} —Å—Ç—Ä–æ–∫")
            
            statement.close()
            return affected_rows
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise
    
    @contextmanager
    def transaction(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        if not self.connection:
            raise Exception("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î")
        
        try:
            self.connection.setAutoCommit(False)
            yield
            self.connection.commit()
            self.logger.info("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            self.connection.rollback()
            self.logger.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞: {e}")
            raise
        finally:
            self.connection.setAutoCommit(True)

    def create_meta_statistic_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        create_query = """
            CREATE TABLE IF NOT EXISTS __meta_statistic (
                id SERIAL PRIMARY KEY,
                entity_type VARCHAR(20) NOT NULL,
                entity_name VARCHAR(100) NOT NULL,
                property_name VARCHAR(100) NOT NULL,
                action INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(entity_type, entity_name, property_name)
            )
        """
        
        try:
            if not self.connect():
                return False
                
            statement = self.connection.createStatement()
            statement.execute(create_query)
            statement.close()
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã __meta_statistic: {e}")
            return False
        finally:
            self.disconnect()

    def init_exceptions_data(self, force_reload=False):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        import os
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        if not force_reload:
            check_query = "SELECT COUNT(*) FROM __meta_statistic"
            try:
                if not self.connect():
                    return False
                result = self.execute_query(check_query)
                if result and int(result[0][0]) > 0:
                    print("–î–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    return True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            finally:
                self.disconnect()
        
        # –§–∞–π–ª—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        files_mapping = {
            'class': '–∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ.md',
            'group': '–∏—Å–∫–ª—é—á–µ–Ω–∏—è –≥—Ä—É–ø–ø.md', 
            'attribute': '–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤.md'
        }
        
        try:
            if not self.connect():
                return False
                
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ force_reload
            if force_reload:
                statement = self.connection.createStatement()
                statement.execute("DELETE FROM __meta_statistic")
                statement.close()
            
            for entity_type, filename in files_mapping.items():
                if os.path.exists(filename):
                    self._load_exceptions_from_file(filename, entity_type)
                    
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")
            return False
        finally:
            self.disconnect()
    
    def _load_exceptions_from_file(self, filename, entity_type):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for line in lines[1:]:
                line = line.strip()
                if not line:
                    continue
                    
                parts = line.split('\t')
                if len(parts) >= 3:
                    attr_title = parts[0].strip()
                    attr_name = parts[1].strip()
                    # –¢—Ä–µ—Ç—å—è –∫–æ–ª–æ–Ω–∫–∞ attr_map –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    default_action = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
                    
                    # –î–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–æ–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
                    if entity_type == 'attribute':
                        # –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
                        update_properties = [
                            'readOnly', 'visible', 'informs', 'grp', 'title', 'description',
                            'refClass', 'refAttr', 'defValue', 'length', 'mandatory',
                            'calculated', 'guid', 'hierarchy', 'cascade'
                        ]
                        
                        if attr_name in update_properties:
                            default_action = 2  # –û–±–Ω–æ–≤–∏—Ç—å
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π INSERT —Å WHERE NOT EXISTS –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    insert_query = """
                        INSERT INTO __meta_statistic (entity_type, entity_name, property_name, action)
                        SELECT ?, ?, ?, ?
                        WHERE NOT EXISTS (
                            SELECT 1 FROM __meta_statistic 
                            WHERE entity_type = ? AND entity_name = ? AND property_name = ?
                        )
                    """
                    
                    try:
                        prep_stmt = self.connection.prepareStatement(insert_query)
                        prep_stmt.setString(1, entity_type)
                        prep_stmt.setString(2, attr_name)
                        prep_stmt.setString(3, attr_title)
                        prep_stmt.setInt(4, default_action)
                        prep_stmt.setString(5, entity_type)
                        prep_stmt.setString(6, attr_name)
                        prep_stmt.setString(7, attr_title)
                        prep_stmt.executeUpdate()
                        prep_stmt.close()
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ {entity_type}/{attr_name}/{attr_title}: {e}")
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")

class MSSQLManager(DatabaseManager):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Microsoft SQL Server"""
    
    def __init__(self):
        super().__init__(config.mssql)

class PostgreSQLManager(DatabaseManager):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL"""
    
    def __init__(self):
        super().__init__(config.postgres)
