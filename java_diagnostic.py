#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Java –¥–ª—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import os
import sys
import glob
import subprocess
from pathlib import Path

def check_java_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Java"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Java installation...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JAVA_HOME
    java_home = os.environ.get('JAVA_HOME')
    if java_home:
        print(f"‚úÖ JAVA_HOME —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {java_home}")
        if os.path.exists(java_home):
            print(f"‚úÖ JAVA_HOME –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå JAVA_HOME –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    else:
        print("‚ö†Ô∏è  JAVA_HOME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º java –∫–æ–º–∞–Ω–¥—É
    try:
        result = subprocess.run(['java', '-version'], 
                              capture_output=True, text=True, stderr=subprocess.STDOUT)
        print(f"‚úÖ Java –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print(f"   {result.stdout.strip()}")
    except FileNotFoundError:
        print("‚ùå Java –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º javac –∫–æ–º–∞–Ω–¥—É
    try:
        result = subprocess.run(['javac', '-version'], 
                              capture_output=True, text=True, stderr=subprocess.STDOUT)
        print(f"‚úÖ Javac –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print(f"   {result.stdout.strip()}")
    except FileNotFoundError:
        print("‚ùå Javac –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def find_java_installations():
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫ Java"""
    print("\nüîç –ü–æ–∏—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–æ–∫ Java...")
    
    java_paths = []
    
    # macOS –ø—É—Ç–∏
    if sys.platform == 'darwin':
        # Homebrew —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        homebrew_paths = [
            '/opt/homebrew/opt/openjdk',
            '/usr/local/opt/openjdk',
            '/opt/homebrew/opt/openjdk@8',
            '/usr/local/opt/openjdk@8',
            '/opt/homebrew/opt/openjdk@11',
            '/usr/local/opt/openjdk@11',
            '/opt/homebrew/opt/openjdk@17',
            '/usr/local/opt/openjdk@17',
        ]
        
        for path in homebrew_paths:
            if os.path.exists(path):
                java_paths.append(path)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        system_paths = glob.glob('/Library/Java/JavaVirtualMachines/*/Contents/Home')
        java_paths.extend(system_paths)
    
    # Linux –ø—É—Ç–∏
    elif sys.platform.startswith('linux'):
        linux_paths = glob.glob('/usr/lib/jvm/java-*')
        java_paths.extend(linux_paths)
    
    if java_paths:
        print("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Java:")
        for i, path in enumerate(java_paths, 1):
            print(f"   {i}. {path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
            java_exe = os.path.join(path, 'bin', 'java')
            if os.path.exists(java_exe):
                try:
                    result = subprocess.run([java_exe, '-version'], 
                                          capture_output=True, text=True, stderr=subprocess.STDOUT)
                    version_line = result.stdout.split('\n')[0]
                    print(f"      –í–µ—Ä—Å–∏—è: {version_line}")
                except:
                    print("      –í–µ—Ä—Å–∏—è: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
            else:
                print("      ‚ùå java executable –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå Java —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return java_paths

def check_jpype():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ jpype"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ jpype...")
    
    try:
        import jpype
        print(f"‚úÖ jpype –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –≤–µ—Ä—Å–∏—è: {jpype.__version__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º getDefaultJVMPath
        try:
            jvm_path = jpype.getDefaultJVMPath()
            print(f"‚úÖ getDefaultJVMPath(): {jvm_path}")
            
            if os.path.exists(jvm_path):
                print(f"‚úÖ JVM —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå JVM —Ñ–∞–π–ª –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ getDefaultJVMPath(): {e}")
            
    except ImportError as e:
        print(f"‚ùå jpype –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install jpype1")

def check_jdbc_drivers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ JDBC –¥—Ä–∞–π–≤–µ—Ä–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ JDBC –¥—Ä–∞–π–≤–µ—Ä–æ–≤...")
    
    drivers = [
        './lib/postgresql.jar',
        './lib/mssql-jdbc.jar'
    ]
    
    for driver in drivers:
        if os.path.exists(driver):
            size = os.path.getsize(driver)
            print(f"‚úÖ {driver} - {size} –±–∞–π—Ç")
        else:
            print(f"‚ùå {driver} - –ù–ï –ù–ê–ô–î–ï–ù")

def recommendations():
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ï—Å–ª–∏ Java –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:")
    print("   macOS: brew install openjdk")
    print("   Linux: sudo apt-get install openjdk-8-jdk")
    print("   –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —Å https://adoptopenjdk.net/")
    
    print("\n2. –ï—Å–ª–∏ jpype –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
    print("   pip install jpype1")
    
    print("\n3. –ï—Å–ª–∏ JDBC –¥—Ä–∞–π–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:")
    print("   –°–∫–∞—á–∞–π—Ç–µ –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –ø–∞–ø–∫—É lib/:")
    print("   - postgresql.jar")
    print("   - mssql-jdbc.jar")
    
    print("\n4. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å JAVA_HOME:")
    print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    java_paths = find_java_installations()
    if java_paths:
        print(f"   export JAVA_HOME='{java_paths[0]}'")

if __name__ == "__main__":
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Java –¥–ª—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("=" * 50)
    
    check_java_installation()
    find_java_installations()
    check_jpype()
    check_jdbc_drivers()
    recommendations()
    
    print("\n" + "=" * 50)
    print("üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞") 